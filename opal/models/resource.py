# coding: utf-8

"""
    Opal API

    Your Home For Developer Resources.

    The version of the OpenAPI document: 1.0
    Contact: hello@opal.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from opal.models.request_configuration import RequestConfiguration
from opal.models.resource_remote_info import ResourceRemoteInfo
from opal.models.resource_type_enum import ResourceTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class Resource(BaseModel):
    """
    # Resource Object ### Description The `Resource` object is used to represent a resource.  ### Usage Example Update from the `UPDATE Resources` endpoint.
    """ # noqa: E501
    resource_id: StrictStr = Field(description="The ID of the resource.")
    app_id: Optional[StrictStr] = Field(default=None, description="The ID of the app.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the resource.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the resource.")
    admin_owner_id: Optional[StrictStr] = Field(default=None, description="The ID of the owner of the resource.")
    remote_resource_id: Optional[StrictStr] = Field(default=None, description="The ID of the resource on the remote system.")
    remote_resource_name: Optional[StrictStr] = Field(default=None, description="The name of the resource on the remote system.")
    resource_type: Optional[ResourceTypeEnum] = None
    max_duration: Optional[StrictInt] = Field(default=None, description="The maximum duration for which the resource can be requested (in minutes).")
    recommended_duration: Optional[StrictInt] = Field(default=None, description="The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.")
    require_manager_approval: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not access requests to the resource require manager approval.")
    require_support_ticket: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not access requests to the resource require an access ticket.")
    require_mfa_to_approve: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not to require MFA for reviewers to approve requests for this resource.")
    require_mfa_to_request: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not to require MFA for requesting access to this resource.")
    require_mfa_to_connect: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not to require MFA to connect to this resource.")
    auto_approval: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not to automatically approve requests to this resource.")
    request_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the associated request template.")
    is_requestable: Optional[StrictBool] = Field(default=None, description="A bool representing whether or not to allow access requests to this resource.")
    parent_resource_id: Optional[StrictStr] = Field(default=None, description="The ID of the parent resource.")
    configuration_template_id: Optional[StrictStr] = Field(default=None, description="The ID of the associated configuration template.")
    request_configurations: Optional[List[RequestConfiguration]] = Field(default=None, description="A list of configurations for requests to this resource.")
    request_configuration_list: Optional[List[RequestConfiguration]] = Field(default=None, description="A list of configurations for requests to this resource. Deprecated in favor of `request_configurations`.")
    metadata: Optional[StrictStr] = Field(default=None, description="JSON metadata about the remote resource. Only set for items linked to remote systems. See [this guide](https://docs.opal.dev/reference/end-system-objects) for details.")
    remote_info: Optional[ResourceRemoteInfo] = None
    __properties: ClassVar[List[str]] = ["resource_id", "app_id", "name", "description", "admin_owner_id", "remote_resource_id", "remote_resource_name", "resource_type", "max_duration", "recommended_duration", "require_manager_approval", "require_support_ticket", "require_mfa_to_approve", "require_mfa_to_request", "require_mfa_to_connect", "auto_approval", "request_template_id", "is_requestable", "parent_resource_id", "configuration_template_id", "request_configurations", "request_configuration_list", "metadata", "remote_info"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in request_configurations (list)
        _items = []
        if self.request_configurations:
            for _item in self.request_configurations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['request_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in request_configuration_list (list)
        _items = []
        if self.request_configuration_list:
            for _item in self.request_configuration_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['request_configuration_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote_info
        if self.remote_info:
            _dict['remote_info'] = self.remote_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_id": obj.get("resource_id"),
            "app_id": obj.get("app_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "admin_owner_id": obj.get("admin_owner_id"),
            "remote_resource_id": obj.get("remote_resource_id"),
            "remote_resource_name": obj.get("remote_resource_name"),
            "resource_type": obj.get("resource_type"),
            "max_duration": obj.get("max_duration"),
            "recommended_duration": obj.get("recommended_duration"),
            "require_manager_approval": obj.get("require_manager_approval"),
            "require_support_ticket": obj.get("require_support_ticket"),
            "require_mfa_to_approve": obj.get("require_mfa_to_approve"),
            "require_mfa_to_request": obj.get("require_mfa_to_request"),
            "require_mfa_to_connect": obj.get("require_mfa_to_connect"),
            "auto_approval": obj.get("auto_approval"),
            "request_template_id": obj.get("request_template_id"),
            "is_requestable": obj.get("is_requestable"),
            "parent_resource_id": obj.get("parent_resource_id"),
            "configuration_template_id": obj.get("configuration_template_id"),
            "request_configurations": [RequestConfiguration.from_dict(_item) for _item in obj["request_configurations"]] if obj.get("request_configurations") is not None else None,
            "request_configuration_list": [RequestConfiguration.from_dict(_item) for _item in obj["request_configuration_list"]] if obj.get("request_configuration_list") is not None else None,
            "metadata": obj.get("metadata"),
            "remote_info": ResourceRemoteInfo.from_dict(obj["remote_info"]) if obj.get("remote_info") is not None else None
        })
        return _obj


