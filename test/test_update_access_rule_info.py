# coding: utf-8

"""
    Opal API

    The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

    The version of the OpenAPI document: 1.0
    Contact: hello@opal.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from opal_security.models.update_access_rule_info import UpdateAccessRuleInfo

class TestUpdateAccessRuleInfo(unittest.TestCase):
    """UpdateAccessRuleInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateAccessRuleInfo:
        """Test UpdateAccessRuleInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateAccessRuleInfo`
        """
        model = UpdateAccessRuleInfo()
        if include_optional:
            return UpdateAccessRuleInfo(
                name = 'Platform Engineering',
                description = 'This access rule represents all platform engineers in the company.',
                admin_owner_id = '7c86c85d-0651-43e2-a748-d69d658418e8',
                status = 'ACTIVE',
                rule_clauses = opal_security.models.rule_clauses.RuleClauses(
                    when = opal_security.models.rule_conjunction.RuleConjunction(
                        clauses = [
                            opal_security.models.rule_disjunction.RuleDisjunction(
                                selectors = [
                                    opal_security.models.tag_selector.TagSelector(
                                        key = '', 
                                        value = '', 
                                        connection_id = '', )
                                    ], )
                            ], ), 
                    unless = opal_security.models.rule_conjunction.RuleConjunction(
                        clauses = [
                            opal_security.models.rule_disjunction.RuleDisjunction(
                                selectors = [
                                    opal_security.models.tag_selector.TagSelector(
                                        key = '', 
                                        value = '', 
                                        connection_id = '', )
                                    ], )
                            ], ), )
            )
        else:
            return UpdateAccessRuleInfo(
                name = 'Platform Engineering',
                description = 'This access rule represents all platform engineers in the company.',
                admin_owner_id = '7c86c85d-0651-43e2-a748-d69d658418e8',
                status = 'ACTIVE',
                rule_clauses = opal_security.models.rule_clauses.RuleClauses(
                    when = opal_security.models.rule_conjunction.RuleConjunction(
                        clauses = [
                            opal_security.models.rule_disjunction.RuleDisjunction(
                                selectors = [
                                    opal_security.models.tag_selector.TagSelector(
                                        key = '', 
                                        value = '', 
                                        connection_id = '', )
                                    ], )
                            ], ), 
                    unless = opal_security.models.rule_conjunction.RuleConjunction(
                        clauses = [
                            opal_security.models.rule_disjunction.RuleDisjunction(
                                selectors = [
                                    opal_security.models.tag_selector.TagSelector(
                                        key = '', 
                                        value = '', 
                                        connection_id = '', )
                                    ], )
                            ], ), ),
        )
        """

    def testUpdateAccessRuleInfo(self):
        """Test UpdateAccessRuleInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
